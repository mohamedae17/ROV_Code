# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import main
import threading
import pygame
from PyQt5 import QtCore, QtGui, QtWidgets
import threading
from time import sleep
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QLineEdit
import serial
#      Global Variable #clear this variable when assemble joystick

Mo = "fowardward"         # Motors & Servo
SPEED = 1030         #speed of motors
leak = 'noleak'           #leakage
# leak=joystick.ser.write.readline()   #uncomment this variable when assemble joystick
serPos1 = 90          #main servo position
serPos2 = 40          #seconary servo position
currentSpeed = 1
currentDirection = 0
pressedButton = -1
prevHat = 0

# Initialize the joysticks.
pygame.init()
pygame.joystick.init()

# count number of connected joysticks
joystick_count = pygame.joystick.get_count()

arduinoPort = 'com9'
arduino = serial.Serial() #= serial.Serial(arduinoPort, 9600)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1104, 680)
        self.widget = QtWidgets.QWidget(MainWindow)
        self.widget.setObjectName("widget")
        self.background = QtWidgets.QLabel(self.widget)
        self.background.setGeometry(QtCore.QRect(-20, -20, 1181, 681))
        self.background.setAutoFillBackground(False)
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap("Top-forpage.jpg"))
        self.background.setObjectName("background")
        self.Motor_groupBox = QtWidgets.QGroupBox(self.widget)
        self.Motor_groupBox.setEnabled(True)
        self.Motor_groupBox.setGeometry(QtCore.QRect(10, 20, 501, 321))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Motor_groupBox.setFont(font)
        self.Motor_groupBox.setAutoFillBackground(False)
        self.Motor_groupBox.setStyleSheet("color:white;")
        self.Motor_groupBox.setFlat(False)
        self.Motor_groupBox.setCheckable(False)
        self.Motor_groupBox.setObjectName("Motor_groupBox")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.Motor_groupBox)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 30, 81, 171))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.motor1_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.motor1_label.setFont(font)
        self.motor1_label.setObjectName("motor1_label")
        self.verticalLayout.addWidget(self.motor1_label)
        self.motor2_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.motor2_label.setFont(font)
        self.motor2_label.setObjectName("motor2_label")
        self.verticalLayout.addWidget(self.motor2_label)
        self.motor3_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.motor3_label.setFont(font)
        self.motor3_label.setObjectName("motor3_label")
        self.verticalLayout.addWidget(self.motor3_label)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.Motor_groupBox)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(260, 30, 81, 171))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.motor4_label = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.motor4_label.setFont(font)
        self.motor4_label.setObjectName("motor4_label")
        self.verticalLayout_2.addWidget(self.motor4_label)
        self.motor5_label = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.motor5_label.setFont(font)
        self.motor5_label.setObjectName("motor5_label")
        self.verticalLayout_2.addWidget(self.motor5_label)
        self.motor6_label = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.motor6_label.setFont(font)
        self.motor6_label.setObjectName("motor6_label")
        self.verticalLayout_2.addWidget(self.motor6_label)
        self.motor7_label = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor7_label.setGeometry(QtCore.QRect(120, 200, 79, 52))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.motor7_label.setFont(font)
        self.motor7_label.setObjectName("motor7_label")
        self.motor1Value = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor1Value.setGeometry(QtCore.QRect(100, 40, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.motor1Value.setFont(font)
        self.motor1Value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.motor1Value.setObjectName("motor1Value")
        self.motor2Value = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor2Value.setGeometry(QtCore.QRect(100, 100, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.motor2Value.setFont(font)
        self.motor2Value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.motor2Value.setObjectName("motor2Value")
        self.motor3Value = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor3Value.setGeometry(QtCore.QRect(100, 160, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.motor3Value.setFont(font)
        self.motor3Value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.motor3Value.setObjectName("motor3Value")
        self.motor4Value = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor4Value.setGeometry(QtCore.QRect(350, 40, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.motor4Value.setFont(font)
        self.motor4Value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.motor4Value.setObjectName("motor4Value")
        self.motor5Value = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor5Value.setGeometry(QtCore.QRect(350, 100, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.motor5Value.setFont(font)
        self.motor5Value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.motor5Value.setObjectName("motor5Value")
        self.motor6Value = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor6Value.setGeometry(QtCore.QRect(350, 160, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.motor6Value.setFont(font)
        self.motor6Value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.motor6Value.setObjectName("motor6Value")
        self.motor7Value = QtWidgets.QLabel(self.Motor_groupBox)
        self.motor7Value.setGeometry(QtCore.QRect(210, 210, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.motor7Value.setFont(font)
        self.motor7Value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.motor7Value.setObjectName("motor7Value")
        self.direction_label = QtWidgets.QLabel(self.Motor_groupBox)
        self.direction_label.setGeometry(QtCore.QRect(10, 250, 79, 52))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.direction_label.setFont(font)
        self.direction_label.setObjectName("direction_label")
        self.direction_value = QtWidgets.QLabel(self.Motor_groupBox)
        self.direction_value.setGeometry(QtCore.QRect(100, 260, 100, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.direction_value.setFont(font)
        self.direction_value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.direction_value.setObjectName("direction_value")
        self.speed_label = QtWidgets.QLabel(self.Motor_groupBox)
        self.speed_label.setGeometry(QtCore.QRect(270, 250, 79, 52))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.speed_label.setFont(font)
        self.speed_label.setObjectName("speed_label")
        self.speed_value = QtWidgets.QLabel(self.Motor_groupBox)
        self.speed_value.setGeometry(QtCore.QRect(350, 260, 100, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.speed_value.setFont(font)
        self.speed_value.setStyleSheet("color:black;\n"
"background-color: rgba(255, 0, 0, 255);")
        self.speed_value.setObjectName("speed_value")
        #timer
        # counter
        self.count = 0
        self.minute = 0
        # creating flag
        self.flag = False
        self.Timer_groupBox = QtWidgets.QGroupBox(self.widget)
        self.Timer_groupBox.setGeometry(QtCore.QRect(520, 20, 171, 321))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Timer_groupBox.setFont(font)
        self.Timer_groupBox.setStyleSheet("color : white;")
        self.Timer_groupBox.setObjectName("Timer_groupBox")
        self.timer_label = QtWidgets.QLabel(self.Timer_groupBox)
        self.timer_label.setGeometry(QtCore.QRect(60, 50, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.timer_label.setFont(font)
        self.timer_label.setObjectName("timer_label")
        self.timer_label.setText(str(self.count))
        self.timer_label.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.Timer_groupBox)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 120, 151, 191))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.start_btn = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.start_btn.setFont(font)
        self.start_btn.setStyleSheet("color:black;\n"
"background-color : white;")
        self.start_btn.setObjectName("start_btn")
        self.verticalLayout_3.addWidget(self.start_btn)
        self.start_btn.pressed.connect(self.Start)
        self.pause_btn = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pause_btn.setFont(font)
        self.pause_btn.setStyleSheet("color:black;\n"
"background-color : white;")
        self.pause_btn.setObjectName("pause_btn")
        self.verticalLayout_3.addWidget(self.pause_btn)
        self.pause_btn.pressed.connect(self.Pause)
        self.reset_btn = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.reset_btn.setFont(font)
        self.reset_btn.setStyleSheet("color:black;\n"
"background-color : white;")
        self.reset_btn.setObjectName("reset_btn")
        self.verticalLayout_3.addWidget(self.reset_btn)
        self.reset_btn.pressed.connect(self.Re_set)
         # creating a timer object
        timer = QTimer(self.widget)

        # adding action to timer
        timer.timeout.connect(self.showTime)

        # update the timer every tenth second
        timer.start(100)

        self.connection_groupBox = QtWidgets.QGroupBox(self.widget)
        self.connection_groupBox.setGeometry(QtCore.QRect(10, 360, 281, 241))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.connection_groupBox = QtWidgets.QGroupBox(self.widget)
        self.connection_groupBox.setGeometry(QtCore.QRect(10, 360, 281, 241))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.connection_groupBox.setFont(font)
        self.connection_groupBox.setStyleSheet("color:white;")
        self.connection_groupBox.setObjectName("connection_groupBox")
        self.arduino_TextBox = QLineEdit(self.connection_groupBox)
        self.arduino_TextBox.setGeometry(QtCore.QRect(150, 70, 73, 22))
        self.arduino_TextBox.setStyleSheet("color:black;\n"
                                           "background-color:yellow;")
        self.arduino_TextBox.setObjectName("arduino_comboBox")

        self.Check_btn = QtWidgets.QPushButton(self.connection_groupBox)
        self.Check_btn.setGeometry(QtCore.QRect(150, 200, 73, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(30)
        self.Check_btn.setFont(font)
        self.Check_btn.setStyleSheet("color:black;\n"
                                     "background-color : yellow;")
        self.Check_btn.setObjectName("Check_btn")
        self.Check_btn.clicked.connect(self.joystickArduinoConnection)

        self.joystick_img = QtWidgets.QLabel(self.connection_groupBox)
        self.joystick_img.setGeometry(QtCore.QRect(10, 110, 131, 181))
        self.joystick_img.setMaximumSize(QtCore.QSize(100, 100))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.joystick_img.setFont(font)
        self.joystick_img.setToolTipDuration(-1)
        self.joystick_img.setAccessibleDescription("")
        self.joystick_img.setText("")
        self.joystick_img.setPixmap(QtGui.QPixmap("joystick.png"))
        self.joystick_img.setScaledContents(True)
        self.joystick_img.setWordWrap(False)
        self.joystick_img.setOpenExternalLinks(False)
        self.joystick_img.setObjectName("joystick_img")

        self.arduino_connect = QtWidgets.QLabel(self.connection_groupBox)
        self.arduino_connect.setGeometry(QtCore.QRect(130, 30, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.arduino_connect.setFont(font)
        self.arduino_connect.setStyleSheet("color:black;\n"
                                           "background-color: rgba(255, 0, 0, 255);")
        self.arduino_connect.setObjectName("arduino_connect")

        self.joystick_connect = QtWidgets.QLabel(self.connection_groupBox)
        self.joystick_connect.setGeometry(QtCore.QRect(130, 160, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.joystick_connect.setFont(font)
        self.joystick_connect.setStyleSheet("color:black;\n"
                                            "background-color: rgba(255, 0, 0, 255);")
        self.joystick_connect.setObjectName("joystick_connect")
        self.arduino_img = QtWidgets.QLabel(self.connection_groupBox)
        self.arduino_img.setGeometry(QtCore.QRect(10, 20, 121, 80))
        self.arduino_img.setMaximumSize(QtCore.QSize(167, 167))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.arduino_img.setFont(font)
        self.arduino_img.setToolTipDuration(-1)
        self.arduino_img.setAccessibleDescription("")
        self.arduino_img.setText("")
        self.arduino_img.setPixmap(QtGui.QPixmap("usb-cable-arduino.png"))
        self.arduino_img.setScaledContents(True)
        self.arduino_img.setWordWrap(False)
        self.arduino_img.setOpenExternalLinks(False)
        self.arduino_img.setObjectName("arduino_img")
        self.sensor_groupBox = QtWidgets.QGroupBox(self.widget)
        self.sensor_groupBox.setGeometry(QtCore.QRect(700, 20, 151, 421))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.sensor_groupBox.setFont(font)
        self.sensor_groupBox.setStyleSheet("color : white;")
        self.sensor_groupBox.setObjectName("sensor_groupBox")
        self.detection_label = QtWidgets.QLabel(self.sensor_groupBox)
        self.detection_label.setGeometry(QtCore.QRect(10, 40, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.detection_label.setFont(font)
        self.detection_label.setObjectName("detection_label")
        self.detection_value = QtWidgets.QLabel(self.sensor_groupBox)
        self.detection_value.setGeometry(QtCore.QRect(30, 70, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.detection_value.setFont(font)
        self.detection_value.setStyleSheet("color:black;\n"
"background-color: rgb(100, 199, 0);")
        self.detection_value.setObjectName("detection_value")
        self.temperature_label = QtWidgets.QLabel(self.sensor_groupBox)
        self.temperature_label.setGeometry(QtCore.QRect(10, 120, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.temperature_label.setFont(font)
        self.temperature_label.setObjectName("temperature_label")
        self.progressBar = QtWidgets.QProgressBar(self.sensor_groupBox)
        self.progressBar.setGeometry(QtCore.QRect(20, 170, 20, 201))
        self.progressBar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.progressBar.setStyleSheet("QProgressBar{\n"
"    background-color: rgb(200, 200, 200);\n"
"    color: rgb(0, 0, 0);\n"
"    border-style:solid;\n"
"    border-radius:10px;\n"
"    text-align:center;\n"
"}\n"
"QProgressBar::chunk {\n"
"    border-style:solid;\n"
"    border-radius:10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(170, 0, 0, 255));\n"
"}")
        self.progressBar.setProperty("value", 25)
        self.progressBar.setTextVisible(False)
        self.progressBar.setOrientation(QtCore.Qt.Vertical)
        self.progressBar.setObjectName("progressBar")
        self.temperature_value = QtWidgets.QLCDNumber(self.sensor_groupBox)
        self.temperature_value.setGeometry(QtCore.QRect(56, 160, 58, 24))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.temperature_value.setFont(font)
        self.temperature_value.setStyleSheet("font: 75 14pt \"MS Shell Dlg 2\";")
        self.temperature_value.setProperty("value", 25)
        self.temperature_value.setObjectName("temperature_value")
        self.C_label = QtWidgets.QLabel(self.sensor_groupBox)
        self.C_label.setGeometry(QtCore.QRect(120, 158, 23, 24))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.C_label.setFont(font)
        self.C_label.setScaledContents(True)
        self.C_label.setObjectName("C_label")
        self.temperature_psd = QtWidgets.QLabel(self.sensor_groupBox)
        self.temperature_psd.setGeometry(QtCore.QRect(-70, 132, 211, 301))
        self.temperature_psd.setText("")
        self.temperature_psd.setPixmap(QtGui.QPixmap("tmp.png"))
        self.temperature_psd.setScaledContents(True)
        self.temperature_psd.setWordWrap(False)
        self.temperature_psd.setOpenExternalLinks(False)
        self.temperature_psd.setObjectName("temperature_psd")
        self.image_groupBox = QtWidgets.QGroupBox(self.widget)
        self.image_groupBox.setGeometry(QtCore.QRect(300, 360, 391, 241))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.image_groupBox.setFont(font)
        self.image_groupBox.setStyleSheet("color : white;")
        self.image_groupBox.setObjectName("image_groupBox")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.image_groupBox)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(10, 30, 371, 185))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.task1_btn = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.task1_btn.setFont(font)
        self.task1_btn.setStyleSheet("color:black;\n"
"background-color : white;")
        self.task1_btn.setObjectName("task1_btn")
        self.verticalLayout_4.addWidget(self.task1_btn)
        self.task1_btn.clicked.connect(self.task1)
        self.task2_btn = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.task2_btn.setFont(font)
        self.task2_btn.setStyleSheet("color:black;\n"
"background-color : white;")
        self.task2_btn.setObjectName("task2_btn")
        self.verticalLayout_4.addWidget(self.task2_btn)
        self.task3_btn = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.task3_btn.setFont(font)
        self.task3_btn.setStyleSheet("color:black;\n"
"background-color : white;")
        self.task3_btn.setObjectName("task3_btn")
        self.verticalLayout_4.addWidget(self.task3_btn)
        self.camera_btn = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.camera_btn.setFont(font)
        self.camera_btn.setStyleSheet("color:black;\n"
"background-color : white;")
        self.camera_btn.setObjectName("camera_btn")
        self.verticalLayout_4.addWidget(self.camera_btn)
        self.logo = QtWidgets.QLabel(self.widget)
        self.logo.setGeometry(QtCore.QRect(850, 0, 241, 361))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap("logo.png"))
        self.logo.setObjectName("logo")
        self.servo_groupBox = QtWidgets.QGroupBox(self.widget)
        self.servo_groupBox.setGeometry(QtCore.QRect(700, 440, 321, 161))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.servo_groupBox.setFont(font)
        self.servo_groupBox.setStyleSheet("color:white;")
        self.servo_groupBox.setObjectName("servo_groupBox")
        self.mainCam_spinBox = QtWidgets.QLabel(self.servo_groupBox)
        self.mainCam_spinBox.setGeometry(QtCore.QRect(180, 60, 42, 22))
        self.mainCam_spinBox.setObjectName("mainCam_spinBox")
        self.mainCam_spinBox.setStyleSheet("color:black;\n"
                                           "background-color: rgba(153,217,234, 255);")
        self.mainCam_spinBox.setText('   ' + str(serPos1))
        self.secondary_spinBox = QtWidgets.QLabel(self.servo_groupBox)
        self.secondary_spinBox.setGeometry(QtCore.QRect(180, 110, 42, 22))
        self.secondary_spinBox.setObjectName("secondary_spinBox")
        self.secondary_spinBox.setStyleSheet("color:black;\n"
                                           "background-color: rgba(153,217,234, 255);")
        self.secondary_spinBox.setText('   ' + str(serPos2))
        self.MainCam_label = QtWidgets.QLabel(self.servo_groupBox)
        self.MainCam_label.setGeometry(QtCore.QRect(20, 60, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.MainCam_label.setFont(font)
        self.MainCam_label.setObjectName("MainCam_label")
        self.secondary_label = QtWidgets.QLabel(self.servo_groupBox)
        self.secondary_label.setGeometry(QtCore.QRect(20, 110, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.secondary_label.setFont(font)
        self.secondary_label.setObjectName("secondary_label")
        self.secondary_btn = QtWidgets.QPushButton(self.servo_groupBox)
        self.secondary_btn.setGeometry(QtCore.QRect(240, 110, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.secondary_btn.setFont(font)
        self.secondary_btn.setStyleSheet("color:black; background-color:red;")
        self.secondary_btn.setObjectName("secondary_btn")
        MainWindow.setCentralWidget(self.widget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1104, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Motor_groupBox.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ffffff;\">Motors</span></p></body></html>"))
        self.Motor_groupBox.setTitle(_translate("MainWindow", "Motors"))
        self.motor1_label.setText(_translate("MainWindow", "Motor 1 :"))
        self.motor2_label.setText(_translate("MainWindow", "Motor 2 :"))
        self.motor3_label.setText(_translate("MainWindow", "Motor 3 :"))
        self.motor4_label.setText(_translate("MainWindow", "Motor 4 :"))
        self.motor5_label.setText(_translate("MainWindow", "Motor 5 :"))
        self.motor6_label.setText(_translate("MainWindow", "Motor 6 :"))
        self.motor7_label.setText(_translate("MainWindow", "Motor 7 :"))
        self.motor1Value.setText(_translate("MainWindow", " Stopped"))
        self.motor2Value.setText(_translate("MainWindow", " Stopped"))
        self.motor3Value.setText(_translate("MainWindow", " Stopped"))
        self.motor4Value.setText(_translate("MainWindow", " Stopped"))
        self.motor5Value.setText(_translate("MainWindow", " Stopped"))
        self.motor6Value.setText(_translate("MainWindow", " Stopped"))
        self.motor7Value.setText(_translate("MainWindow", " Stopped"))
        self.direction_label.setText(_translate("MainWindow", "Direction :"))
        self.direction_value.setText(_translate("MainWindow", " Stopped"))
        self.speed_label.setText(_translate("MainWindow", "Speed  :"))
        self.speed_value.setText(_translate("MainWindow",'  ' +str(SPEED)+'m/s' ))
        self.Timer_groupBox.setTitle(_translate("MainWindow", "Timer"))
        self.timer_label.setText(_translate("MainWindow", "0.0"))
        self.start_btn.setText(_translate("MainWindow", "Start"))
        self.pause_btn.setText(_translate("MainWindow", "Pause"))
        self.reset_btn.setText(_translate("MainWindow", "Reset"))
        self.connection_groupBox.setTitle(_translate("MainWindow", "Connections"))
        self.Check_btn.setText(_translate("MainWindow", "Check"))
        self.joystick_connect.setText(_translate("MainWindow", " Disconnected"))
        self.arduino_connect.setText(_translate("MainWindow", " Disconnected"))
        self.sensor_groupBox.setTitle(_translate("MainWindow", "Sensors"))
        self.detection_label.setText(_translate("MainWindow", "Water Detection :"))
        self.detection_value.setText(_translate("MainWindow", " No leak"))
        self.temperature_label.setText(_translate("MainWindow", "Temperature :"))
        self.C_label.setText(_translate("MainWindow", "°C"))
        self.image_groupBox.setTitle(_translate("MainWindow", "Image"))
        self.task1_btn.setText(_translate("MainWindow", "Task 1"))
        self.task2_btn.setText(_translate("MainWindow", "Task 2"))
        self.task3_btn.setText(_translate("MainWindow", "Task 3"))
        self.camera_btn.setText(_translate("MainWindow", "Open Camera"))
        self.servo_groupBox.setTitle(_translate("MainWindow", "Camera Servo"))
        self.MainCam_label.setText(_translate("MainWindow", "Main Camera"))
        self.secondary_label.setText(_translate("MainWindow", "Secondary"))
        self.secondary_btn.setText(_translate("MainWindow", "OFF"))
        #self.leaki()
        self.joystickArduinoConnection()

        '''
        if joystick_count > 0:
            self.joystick_connect.setText(_translate("MainWindow", " Connect"))
            self.joystick_connect.setStyleSheet("color:black;\n"
                                           "background-color: rgba(0,255, 0, 255);")'''
        # ____________________________________________________
        # threading
        threading.Thread(target=self.joystick_event).start()

    # ____________________________________________________
    # leakage sensor
    def leak(self):
       if leak =='leak':
           _translate = QtCore.QCoreApplication.translate
           MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
           self.detection_value.setText(_translate("MainWindow", " leak!!"))
           self.detection_value.setStyleSheet("color:black;\n"
                                              "background-color: rgb(250, 0, 0);")
       else:
           _translate = QtCore.QCoreApplication.translate
           MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
           self.detection_value.setText(_translate("MainWindow", " No leak"))
           self.detection_value.setStyleSheet("color:black;\n"
                                              "background-color: rgb(0, 255, 0);")
       # leakage sensor threading
    def leaki (self):
        le= threading.Thread(self.leak())
        le.start()

    # method called by timer
    def showTime(self):

        # checking if flag is true
        if self.flag:

            # incrementing the counter
            self.count+= 1

        # getting text from count
            text = str(self.count / 10)
            if(self.count == 600):
                self.count = 0
                self.minute+=1
            text2 = str(self.minute)
            # showing text
            self.timer_label.setText(text2+":"+ text)
    def Start(self):
        # making flag to true
        self.flag = True
    def Pause(self):

        # making flag to False
        self.flag = False

    def Re_set(self):

        # making flag to false
        self.flag = False

        # reseeting the count
        self.count = 0
        self.minute = 0
        # setting text to label
        self.timer_label.setText(str(self.count))

    def check_port(self):
        global arduinoPort
        if self.arduino_TextBox.text() != "":
            arduinoPort = self.arduino_TextBox.text()

    def initialize(self, joyStickName):
            joystick_count = pygame.joystick.get_count()
            for j in range(joystick_count):
                    joystick = pygame.joystick.Joystick(j)
                    name = joystick.get_name()
                    if name == joyStickName:
                            joystick.init()
                            return joystick
            print("No joystick found")
            pass

    def button(self, joystick, buttonsNum):
            global pressedButton
            global currentDirection
            global Mo
            global serPos1
            global serPos2

            for i in range(buttonsNum):
                    button = joystick.get_button(i)
                    if button == 1:
                            if i == 5:
                                    dir = 7


                                    Mo = "upward"
                                    self.sendingMovement(currentSpeed, dir)
                                    print("Button {} pressed".format(i))
                            elif i == 3:
                                    dir = 8
                                    Mo = "downward"
                                    self.sendingMovement(currentSpeed,dir)
                                    print("Button {} pressed".format(i))
                            elif i == 11: # + servo1
                                    dir = 0
                                    Mo = "servo1"
                                    serPos1 = min(180, serPos1 + 20)
                                    self.sendingMovement(0, dir=dir, servoMov=True)
                                    print("Button {} pressed".format(i))
                            elif i == 10: # - servo1
                                    dir = 1
                                    Mo = "servo1"
                                    serPos1 = max(0, serPos1 - 20)
                                    self.sendingMovement(0, dir=dir, servoMov=True)
                                    print("Button {} pressed".format(i))
                            elif i == 7: # + servo2
                                    dir = 2
                                    Mo = "servo2"
                                    serPos2 = min(180, serPos2 + 20)
                                    self.sendingMovement(0, dir=dir, servoMov=True)
                                    print("Button {} pressed".format(i))
                            elif i == 6: # - servo2
                                    dir = 3
                                    Mo = "servo2"
                                    serPos2 = max(0, serPos2 - 20)
                                    self.sendingMovement(0, dir=dir, servoMov=True)
                                    print("Button {} pressed".format(i))
                            elif i == 1: # request temp value from arduino
                                    dir = 4
                                    self.sendingMovement(0, dir=dir, servoMov=True)
                                    print("Button {} pressed".format(i))


    def hat(self, joystick, hatNum):
            # there is problem in joystick hat
            global prevHat
            dir = 0
            for i in range(hatNum):
                    hat = joystick.get_hat(i)
                    print('hat:', hat[1])
                    if hat[1] == -1:
                            dir = 7
                    elif hat[1] == 1:
                            dir = 8
                    else:
                            dir = 0
            if prevHat != dir:
                    prevHat = dir
                    # self.sendingMovement(currentSpeed, dir)

    def axis(self, joystick, axesNum):
            global currentSpeed
            global currentDirection
            global Mo

            direction = 0
            speed = -1

            axis0 = -0.0078125
            axis1 = -0.0078125
            axis3 = -0.0078125

            for i in range(axesNum):
                    axis = joystick.get_axis(i)
                    if i == 2:
                            speed = -1 * axis + 1
                            speed = int(speed / 2.0 * 6.0)
                            # print("speed: ", speed)

                    elif axis != -0.0078125:  # axis < -0.2 or axis > 0.2:
                            # print("Axis "+str(i)+ " "+str(axis))
                            if i == 0:
                                    axis0 = axis
                            elif i == 1:
                                    axis1 = axis
                            elif i == 3:
                                    axis3 = axis

            if axis0 == -0.0078125 and axis1 == -0.0078125 and axis3 == -0.0078125:
                    direction = 0
                    Mo = "stop"
                    #print("stop")
            elif axis3 > -0.0078125:
                    direction = 5
                    Mo = "turn right"
                    # print("turn around itself right "+str(speed))
            elif axis3 < -0.0078125:
                    direction = 6
                    Mo = "turn left"
                    # print("turn around itself left "+str(speed))
            elif axis1 <= -0.4:
                    direction = 1
                    Mo = "forward"
                    # print("forward " + str(speed))
            elif axis1 > 0.4:
                    direction = 2
                    Mo = "backward"
                    # print("backward " + str(speed))
            elif axis0 > -0.0078125:
                    direction = 3
                    Mo = "right"
                    # print("right "+str(speed))
            elif axis0 < -0.0078125:
                    direction = 4
                    Mo = "left"
                    # print("left "+str(speed))

            if direction != currentDirection or speed != currentSpeed:
                    currentDirection = direction
                    currentSpeed = speed
                    print("sending command : " + str(direction) + " " + str(speed) + Mo)
                    self.sendingMovement(currentSpeed, currentDirection)

    def joystick_event(self):
            global pressedButton
            global Mo
            global leak
            joyStick = self.initialize("5-Axis,12-Button with POV")
            buttonsNum = joyStick.get_numbuttons()
            axesNum = joyStick.get_numaxes()
            hatNum = joyStick.get_numhats()
            while 1:
                    '''if arduino.in_waiting > 0:
                        data = arduino.read(1)
                        data = int.from_bytes(data, 'big')
                        if data == 255:
                            leak = "leak"
                            self.leak()

                        else:
                            self.temperature_value.setProperty("value", data)
                            self.progressBar.setProperty("value", data)'''

                    # wait until any change(input) in joystick
                    for event in pygame.event.get():  # User did something.
                            if event.type == pygame.QUIT:  # If user clicked close.
                                    done = False  # Flag that we are done so we exit this loop.
                            elif event.type == pygame.JOYBUTTONDOWN:
                                    print("Joystick button pressed.")
                                    self.button(joyStick, buttonsNum)
                            elif event.type == pygame.JOYBUTTONUP:
                                    Mo = "stop"

                                    self.sendingMovement(0, 0)
                                    #pressedButton = -1
                            elif event.type == pygame.JOYAXISMOTION:
                                    # print("axis")
                                    self.axis(joyStick, axesNum)
                            elif event.type == pygame.JOYHATMOTION:
                                    print("hat")
                                    self.hat(joyStick, hatNum)

    def motor(self):
            global Mo
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
            #self.leak()
            if Mo == "forward" or Mo == "backward" or Mo == "turn left" or Mo == "right" or Mo == "left" or Mo == "turn right" :
                    self.motor1Value.setText(_translate("MainWindow", " OFF"))
                    self.motor1Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255,0, 0, 255);")
                    self.motor2Value.setText(_translate("MainWindow", "  OFF"))
                    self.motor2Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255,0, 0, 255);")
                    self.motor3Value.setText(_translate("MainWindow", "  OFF"))
                    self.motor3Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255,0, 0, 255);")
                    self.motor4Value.setText(_translate("MainWindow", "  ON"))
                    self.motor4Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0,255,0, 255);")
                    self.motor5Value.setText(_translate("MainWindow", "  ON"))
                    self.motor5Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0,255, 0, 255);")
                    self.motor6Value.setText(_translate("MainWindow", "  ON"))
                    self.motor6Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0,255, 0, 255);")
                    self.motor7Value.setText(_translate("MainWindow", " ON"))
                    self.motor7Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0, 255, 0, 255);")
                    self.direction_value.setText(_translate("MainWindow", ' ' + Mo))
                    self.direction_value.setStyleSheet("color:black;\n"
                                                       "background-color: rgba(0,255, 0, 255);")


            elif Mo == "downward" or Mo == "upward":
                    self.motor1Value.setText(_translate("MainWindow", " ON"))
                    self.motor1Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0, 255, 0, 255);")
                    self.motor2Value.setText(_translate("MainWindow", " ON"))
                    self.motor2Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0, 255, 0, 255);")

                    self.motor3Value.setText(_translate("MainWindow", " ON"))
                    self.motor3Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0, 255, 0, 255);")
                    self.motor4Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor4Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor5Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor5Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor6Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor6Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor7Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor7Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.direction_value.setText(_translate("MainWindow", ' ' + Mo))
                    self.direction_value.setStyleSheet("color:black;\n"
                                                       "background-color: rgba(0,255, 0, 255);")


            elif Mo == "rotate up" or Mo == "rotate down":
                    self.motor1Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor1Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor2Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor2Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor3Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor3Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor4Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor4Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor5Value.setText(_translate("MainWindow", "Stopped"))
                    self.motor5Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255,0, 0, 255);")
                    self.motor6Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor6Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255,0, 0, 255);")
                    self.motor7Value.setText(_translate("MainWindow", " ON"))
                    self.motor7Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0,255, 0, 255);")
                    self.direction_value.setText(_translate("MainWindow", ' ' + Mo))
                    self.direction_value.setStyleSheet("color:black;\n"
                                                       "background-color: rgba(0,255, 0, 255);")

            elif Mo == "servo1":
                    self.mainCam_spinBox.setText('   ' + str(serPos1))

            elif Mo == "servo2":
                    self.secondary_btn.setText(_translate("MainWindow", "ON"))
                    self.secondary_btn.setStyleSheet("color:black;\n"
                                                     "background-color: rgba(0, 255, 0, 255);")
                    self.secondary_spinBox.setText('   ' + str(serPos2))
            else:
                    self.motor1Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor1Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor2Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor2Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor3Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor3Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor4Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor4Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor5Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor5Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor6Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor6Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.motor7Value.setText(_translate("MainWindow", " Stopped"))
                    self.motor7Value.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(255, 0, 0, 255);")
                    self.direction_value.setText(_translate("MainWindow", ' Stopped '))
                    self.direction_value.setStyleSheet("color:black;\n"
                                                       "background-color: rgba(255,0, 0, 255);")
                    self.secondary_btn.setText(_translate("MainWindow", "OFF"))
                    self.secondary_btn.setStyleSheet("color:black; background-color:red;")

    def sendingMovement(self, speed, dir, servoMov=False):
            global Mo
            data = 0
            if servoMov:
                data = 128
                data = data | dir
            else:
                data = speed << 4
                print("Direction:", str(dir))
                print("Speed:", str(speed))
                data = data | dir
                if dir == 0:
                        Mo = "stop"

            data = data.to_bytes(1, 'big')
            print("data send to arduino:", data)
            self.motor()
            arduino.write(data)
            print("Received from Arduino:", arduino.read(1))

    def joystickArduinoConnection(self):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.check_port()
        pygame.init()
        pygame.joystick.init()
        joystick_count = pygame.joystick.get_count()
        #joystick_count=0
        global arduino
        if joystick_count > 0:
            joystick_count=0
            self.joystick_connect.setText(_translate("MainWindow", " Connect"))
            self.joystick_connect.setStyleSheet("color:black;\n"
                                           "background-color: rgba(0,255, 0, 255);")
        else:

                self.joystick_connect.setText(_translate("MainWindow", " Disconnected"))
                self.joystick_connect.setStyleSheet("color:black;\n"
                                                    "background-color: rgba(255,0, 0, 255);")
        print('joy ',pygame.joystick.get_count())
        try:
                arduino.close()
                arduino = serial.Serial(arduinoPort, 9600)
                self.arduino_connect.setText(_translate("MainWindow", " Connect"))
                self.arduino_connect.setStyleSheet("color:black;\n"
                                                   "background-color: rgba(0,255, 0, 255);")
        except:
                self.arduino_connect.setText(_translate("MainWindow", " Disconnected"))
                self.arduino_connect.setStyleSheet("color:black;\n"
                                                    "background-color: rgba(255,0, 0, 255);")
        #_______________________________________________________

    def task1(self):
        threading.Thread(target=main.gridShapes).start()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
